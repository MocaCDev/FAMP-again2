[org 0x7C00]
use16

jmp 0x0:start

;
; This is not a subheader. This is the "heading" of the entire disk image.
; Following this header there needn't be an assembly program header.
;
FAMP_spec_MBR_header:
    .sig                        db 'FAMP', 0x0, 0x0
    .rev                        dw 0x1000, 0x0
    .usable_entries             db 0x02,
    .entry_locs                 dw 0x1BE, 0x1CE, 0x0, 0x0
	.os_name					db '%s', 0x0
	.os_type					db 0x%X
	.os_version					db '%s', 0x0
	.filesystem_used			db 0x%X
	.in_production				db 0x%X
    .end                        db 'EE', 0x0, 0x0

%%define need_mbr_part_table_access
%%include "protocol/protocol_util.s"

FAMP_spec_MBR_start:
    .id         dw 0xF100
    .id_name    db 'FENT', 0x0, 0x0

start:
	xor ax, ax
	mov es, ax
	mov ds, ax
	mov fs, ax
	mov gs, ax

	cli
	mov bp, 0x7C00
	mov sp, bp
	mov ss, ax
	sti

	; Using the MBR partition table entry, read in the second stage bootloader
	xor ax, ax
	mov es, ax
	mov bx, 0x7E00

	mov ah, 0x02
	mov al, FIRST_ENTRY_SECTOR_AMOUNT
	mov ch, 0x00
	mov cl, FIRST_ENTRY_START_SECTOR
	mov dh, 0x00
	mov dl, 0x80
	int 0x13
	jc failed

	; Jump to program that works with the MBR partition table
	jmp 0x7E25

	; Uh oh, something went wrong
	jmp failed

	; We shouldn't reach here, but if we do, hlt
	cli
	hlt

failed:
    mov ah, 0x0E
    mov al, 'E'
    int 0x10

    cli
    hlt

TIMES 0x01B6 - $ + $$ db 0x0

FAMP_spec_MBR_ptbl_entries:
    .id         dw 0xF2F2
    .id_name    db 'FMPT', 0x0, 0x0

; Second stage bootloader(0x0E = second-stage bootloader)
CreateEntry 1, 0x80, 0x02, 0x0E, 1, 0x%X, 0x%X

; FS(0x0C = FileSystem)
CreateEntry	2, 0x00, 0x0%X, 0x0C, 1, 0x%X, 0x%X

; FS Worker(0x0D = FileSystem Worker)
CreateEntry	3, 0x00, 0x0%X, 0x0D, 0, 0x0%X, 0x%X

; Unused
CreateEntry	4, 0x00, 0x00, 0x01, 0, 0x00, 0x00

dw 0xAA55