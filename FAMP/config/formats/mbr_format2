[org 0x7C00]
use16

jmp 0x0:start

FAMP_spec_MBR_header:
    .sig                        db 'FAMP', 0x0, 0x0
    .rev                        dw 0x1000, 0x0
    .usable_entries             db 0x02,
    .entry_locs                 dw 0x1BE, 0x1CE, 0x0, 0x0
	.os_name					db '%s', 0x0
	.os_type					db 0x%X
	.os_version					db '%s', 0x0
	.filesystem_used			db 0x%X
	.in_production				db 0x%X
    .end                        db 'EE', 0x0, 0x0

%%define FS_SECTOR_AMMOUNT		byte [0x7DD9]	; mbr_partition_entry.starting_sector_and_cylinder
%%define FS_STARTING_SECTOR		byte [0x7DCF]	; mbr_partition_entry.sector_amnt

struc mbr_partition_table_entry
	; Is this MBR partition table entry bootable?(is it describing the rest of the bootloader?)
	; 0x80 = bootable, 0x0 = not bootable
	.is_bootable:									resb 0x01
	; From what sector does the program begin(lower 8-bits)
	; With this, the sector where the program begins has to be the sector where the last program ended off
	; So, for a program after the MBR, `first_sector` would be 2
	; From what cylinder does the sector reside on?(upper 8-bits)
	.starting_sector_and_cylinder:					resw 0x01
	; 0x05/0x0F for extended partition table, 0x01 denoting the entry is unused
	; Any other value has yet to be determined
	.entry_type:									resb 0x01
	; If this is `1`, the MBR partition table C program will automatically read in
	; the needed amount of memory. If `0`, the MBR partition table C program will not load
	; anything into memory.
	; This is going to be more helpful later on. With this, we can primarily mark certain
	; partitions in the extended partition table as "critical", thus, the protocol MUST
	; read the programs residing in each partition into memory AND run them
	.auto_read_program:								resb 0x01
	; From what sector does the program end?(lower 8-bits)
	; From what cylinder does the last sector reside on?(upper 8-bits)
	.last_sector_and_cylinder:						resw 0x01
	; Just set this to zero lol
	.relative_sector:								resd 0x01
	; How many sectors does the program obtain?
	; This amount * 512 will be added to `bprogram_address` to calculate the ending address
	; of the program
	.sector_amnt:									resb 0x01
	; Pad 1 byte
	.pad:											resd 0x01
endstruc

%%macro CreateEntry	7
mbr_partition_entry%%+%%1:	istruc mbr_partition_table_entry
	at mbr_partition_table_entry.is_bootable,					db %%2
	at mbr_partition_table_entry.starting_sector_and_cylinder,	dw %%3
	at mbr_partition_table_entry.entry_type,					db %%4
	at mbr_partition_table_entry.auto_read_program,				db %%5
	at mbr_partition_table_entry.last_sector_and_cylinder,		dw %%6
	at mbr_partition_table_entry.relative_sector,				dd 0x0
	at mbr_partition_table_entry.sector_amnt,					db %%7
	at mbr_partition_table_entry.pad,							dd 0x0
iend
%%endmacro

FAMP_spec_MBR_start:
    .id         dw 0xF100
    .id_name    db 'FENT', 0x0, 0x0

start:
	xor ax, ax
	mov es, ax
	mov ds, ax
	mov fs, ax
	mov gs, ax

	cli
	mov bp, 0x7C00
	mov sp, bp
	mov ss, ax
	sti

	;xor ax, ax
	;mov es, ax
	;mov bx, 0xF000

	;mov ah, 0x02
	;mov al, FS_STARTING_SECTOR
	;mov ch, 0x00
	;mov cl, FS_SECTOR_AMMOUNT
	;mov dh, 0x00
	;mov dl, 0x80
	;int 0x13
	;jc failed

	; Read in program that works with the MBR partition table(located at 0x0500)
	xor ax, ax
	mov es, ax
	mov bx, 0x7E00

	mov ah, 0x02
	mov al, 0x03
	mov ch, 0x00
	mov cl, 0x02
	mov dh, 0x00
	mov dl, 0x80
	int 0x13
	jc failed

	xor ax, ax
	mov es, ax
	mov bx, 0xF000

	mov ah, 0x02
	mov al, FS_SECTOR_AMMOUNT
	mov ch, 0x00
	mov cl, FS_STARTING_SECTOR
	mov dh, 0x00
	mov dl, 0x80
	int 0x13
	jc failed

	;xor ax, ax
	;mov es, ax
	;mov bx, 0x0700

	;mov ah, 0x02
	;mov al, 0x01
	;mov ch, 0x00
	;mov cl, 0x03 ; the `fs_worker` program gets loaded right after the second stage bootloader
	;mov dh, 0x00
	;mov dl, 0x80
	;int 0x13
	;jc failed

	; Jump to program that works with the MBR partition table
	jmp 0x7E00

	; Uh oh, something went wrong
	jmp failed

	; We shouldn't reach here, but if we do, hlt
	cli
	hlt

failed:
    mov ah, 0x0E
    mov al, 'E'
    int 0x10

    cli
    hlt

TIMES 0x01B6 - $ + $$ db 0x0

FAMP_spec_MBR_ptbl_entries:
    .id         dw 0xF2F2
    .id_name    db 'FMPT', 0x0, 0x0

; Second stage bootloader(0x0E = second-stage bootloader)
CreateEntry 1, 0x80, 0x08, 0x0E, 1, 0x%X, 0x%X

; FS(0x0C = FileSystem)
CreateEntry	2, 0x00, 0x05, 0x0C, 1, 0x%X, 0x%X

; FS Worker(0x0D = FileSystem Worker)
; Might not need:
;	The second stage bootloader might be in charge of the rest of things.
CreateEntry	3, 0x00, 0x0%X, 0x0D, 0, 0x0%X, 0x%X

; Unused
CreateEntry	4, 0x00, 0x00, 0x01, 0, 0x00, 0x00

dw 0xAA55